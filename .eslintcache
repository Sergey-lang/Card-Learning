[{"G:\\00_IT\\IT_incubator\\Projects\\Friday-2021\\src\\02-Pages\\05-CardPacks\\CardPacks.tsx":"1","G:\\00_IT\\IT_incubator\\Projects\\Friday-2021\\src\\02-Pages\\05-CardPacks\\CardPaksElement\\CardPacksElement.tsx":"2"},{"size":4672,"mtime":1611423762469,"results":"3","hashOfConfig":"4"},{"size":3531,"mtime":1611423761191,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"328rna",{"filePath":"10","messages":"11","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"G:\\00_IT\\IT_incubator\\Projects\\Friday-2021\\src\\02-Pages\\05-CardPacks\\CardPacks.tsx",["14"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    addCardPacks,\r\n    CardPacksFilterType,\r\n    CardPacksType,\r\n    deleteCardPacks,\r\n    getCardPacks,\r\n    updateCardPacks\r\n} from '../../00-Redux/cardsPack-reducer';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport Input from '../../03-Components/SuperComponents/Input/Input';\r\nimport Button from '../../03-Components/SuperComponents/Button/Button';\r\nimport DoubleRange from '../../03-Components/SuperComponents/DoubleRange/DoubleRange';\r\nimport CardPacksElement from './CardPaksElement/CardPacksElement';\r\nimport style from './CardPacks.module.css'\r\n<<<<<<< HEAD\r\nimport {Paginator} from '../../03-Components/Paginator/Paginator';\r\n=======\r\nimport ModalWindow from '../../03-Components/SuperComponents/Modal/Modal';\r\n\r\n>>>>>>> origin/KateFeatures\r\n\r\nexport type queryParamsType = {\r\n    packName?: string,\r\n    min?: number,\r\n    max?: number,\r\n}\r\n\r\nconst CardPacks: React.FC = () => {\r\n\r\n\r\n    const cardPacks = useSelector<RootStateType, CardPacksType[]>(state => state.cardsPack.cardPacks)\r\n\r\n    const filter = useSelector<RootStateType, CardPacksFilterType>(state => state.cardsPack.filter)\r\n    const currentPage = useSelector<RootStateType, number>(state => state.cardsPack.currentPage)\r\n    const pageSize = useSelector<RootStateType, number>(state => state.cardsPack.pageSize)\r\n    const packsTotalCount = useSelector<RootStateType, number>(state => state.cardsPack.packsTotalCount)\r\n\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [range, setRange] = useState([1, 15])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardPacks(currentPage, pageSize, filter))\r\n    }, [])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getCardPacks(currentPage, pageSize, filtered))\r\n    }\r\n\r\n    const onSearch = () => {\r\n        dispatch(getCardPacks(currentPage, pageSize, filtered))\r\n    }\r\n\r\n    let filtered: CardPacksFilterType = {\r\n        packName: inputValue,\r\n        min: range[0],\r\n        max: range[1],\r\n    }\r\n\r\n    //generate random id\r\n    function genID(serverNum: number) {\r\n        return (serverNum + '' + (new Date).getTime());\r\n    }\r\n\r\n    //fake obj for creating\r\n    const cardTestObj: CardPacksType = {\r\n        '_id': genID(5),\r\n        name: 'NEW PACK-007',\r\n        type: 'Test card Packs 007'\r\n    }\r\n\r\n    const inputHandler = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value)\r\n\r\n    const onAddCardPacks = () => {\r\n        dispatch(addCardPacks(cardTestObj))\r\n    }\r\n    const changeCardPacks = (cardsPack: CardPacksType) => {\r\n        dispatch(updateCardPacks(cardsPack))\r\n    }\r\n<<<<<<< HEAD\r\n    const removeCardPacks = (_id: string) => {\r\n        dispatch(deleteCardPacks(_id))\r\n    }\r\n\r\n    const mappedPacks = cardPacks.map((p: CardPacksType) =>\r\n        <CardPacksElement key={p._id}\r\n                          pack={p}\r\n                          updateCardPacks={changeCardPacks}\r\n                          removeCardPacks={removeCardPacks}/>)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.search}>\r\n                <DoubleRange range={range} setRange={setRange}/>\r\n                <Input onChange={inputHandler}/>\r\n                <Button onClick={onSearch}>Search</Button>\r\n                <Button onClick={onAddCardPacks}>Add CardPacks</Button>\r\n                <Paginator currentPage={currentPage}\r\n                           onPageChanged={onPageChanged}\r\n                           pageSize={pageSize}\r\n                           totalItemsCount={packsTotalCount}/>\r\n                {\r\n                    mappedPacks\r\n                }\r\n            </div>\r\n=======\r\n\r\n    const removeCardPacks = (_id:string) => {\r\n       /* setActiveModal(true)*/\r\n        dispatch(deleteCardPacks(_id))\r\n    }\r\n\r\n\r\n    const mappedPacks = cardPacks.map((p: CardPacksType) =>\r\n        <div>\r\n            <CardPacksElement key={p._id}\r\n                              pack={p}\r\n                              updateCardPacks={changeCardPacks}\r\n                              removeCardPacks={removeCardPacks}/>\r\n\r\n        </div>\r\n    )\r\n\r\n    return <div>\r\n        <div className={style.search}>\r\n            <DoubleRange range={range} setRange={setRange}/>\r\n            <Input onChange={inputHandler}/>\r\n            <Button onClick={onSearch}>Search</Button>\r\n            <Button onClick={onAddCardPacks}>Add CardPacks</Button>\r\n            {\r\n                mappedPacks\r\n            }\r\n\r\n>>>>>>> origin/KateFeatures\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardPacks",["15","16"],"G:\\00_IT\\IT_incubator\\Projects\\Friday-2021\\src\\02-Pages\\05-CardPacks\\CardPaksElement\\CardPacksElement.tsx",["17"],"import React, {ChangeEvent, useState} from 'react';\r\nimport {path} from '../../../04-App/App';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {CardPacksType} from '../../../00-Redux/cardsPack-reducer';\r\n\r\nimport s from './CardPacksElement.module.css'\r\nimport ModalWindow from '../../../03-Components/SuperComponents/Modal/Modal';\r\n\r\ntype CardPropsType = {\r\n    pack: CardPacksType\r\n    updateCardPacks?: (cardsPack: CardPacksType) => void\r\n    removeCardPacks?: (id: string) => void\r\n    showBtn?: boolean\r\n}\r\n\r\nconst CardPacksElement: React.FC<CardPropsType> = (\r\n    {\r\n        pack,\r\n        updateCardPacks,\r\n        removeCardPacks,\r\n        showBtn = true\r\n    }) => {\r\n\r\n    const onUpdateHandler = () => {\r\n<<<<<<< HEAD\r\n        updateCardPacks && updateCardPacks({_id: pack._id, name: 'fake Sergey007', type: 'bla-type'})\r\n=======\r\n        setActiveModalUpdate(true)\r\n>>>>>>> origin/KateFeatures\r\n    }\r\n    const onRemoveHandler = () => {\r\n<<<<<<< HEAD\r\n        removeCardPacks && removeCardPacks(pack._id)\r\n=======\r\n        setActiveModalDelete(true)\r\n    }\r\n\r\n    //for modal\r\n    const [activeModalDelete, setActiveModalDelete] = useState<boolean>(false)\r\n    const [activeModalUpdate, setActiveModalUpdate] = useState<boolean>(false)\r\n    const [titleCard, setTitleCard] = useState<string>('')\r\n    //for delete\r\n    const deleteModalHandlerYes = () => {\r\n        removeCardPacks(pack._id)\r\n>>>>>>> origin/KateFeatures\r\n    }\r\n    const deleteModalHandlerNo = () => {\r\n        setActiveModalDelete(false)\r\n    }\r\n    //for update\r\n    const updateModalHandler = () => {\r\n        updateCardPacks({_id: pack._id, name: titleCard, type: 'bla-type'})\r\n        setActiveModalUpdate(false)\r\n        setTitleCard('')\r\n    }\r\n    const handlerForUpdateTitleCard = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setTitleCard(e.currentTarget.value)\r\n\r\n    }\r\n    const updateModalHandlerCancel = () => {\r\n        setActiveModalUpdate(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div>{pack.name}</div>\r\n            <div>{pack.cardsCount ? pack.cardsCount : `empty`}</div>\r\n            <div>{pack.created}</div>\r\n<<<<<<< HEAD\r\n            <div>\r\n                {showBtn ?\r\n                    <>\r\n                        <button onClick={onUpdateHandler}>Update</button>\r\n                        <button onClick={onRemoveHandler}>Delete</button>\r\n                    </>\r\n                    : ''}\r\n            </div>\r\n\r\n            <NavLink to={path.CARDS + '/' + pack._id}>ссылка</NavLink>\r\n=======\r\n            <button onClick={onUpdateHandler}>Update</button>\r\n            <button onClick={onRemoveHandler}>Delete</button>\r\n            <NavLink to={path.CARDS + '/' + pack._id}>ссылка</NavLink>\r\n\r\n            <ModalWindow active={activeModalDelete} setActive={setActiveModalDelete}>\r\n                <p>Are you sure?</p>\r\n                <button onClick={deleteModalHandlerYes}>Yes</button>\r\n                <button onClick={deleteModalHandlerNo}>No</button>\r\n            </ModalWindow>\r\n\r\n\r\n            <ModalWindow active={activeModalUpdate} setActive={setActiveModalUpdate}>\r\n                <p>Here You can do some changes</p>\r\n                <input type={'text'} onChange={handlerForUpdateTitleCard}/>\r\n                <button onClick={updateModalHandler}>Update</button>\r\n                <button onClick={updateModalHandlerCancel}>Cancel</button>\r\n            </ModalWindow>\r\n>>>>>>> origin/KateFeatures\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardPacksElement",["18","19"],{"ruleId":null,"fatal":true,"severity":2,"message":"20","line":17,"column":0},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":null,"fatal":true,"severity":2,"message":"20","line":25,"column":0},{"ruleId":"21","replacedBy":"25"},{"ruleId":"23","replacedBy":"26"},"Parsing error: Merge conflict marker encountered.","no-native-reassign",["27"],"no-negated-in-lhs",["28"],["27"],["28"],"no-global-assign","no-unsafe-negation"]