{"version":3,"sources":["assets/css/container.module.css","02-Features/00-Header/Header.module.css","03-Components/SuperComponents/ProgressBar/ProgressBar.tsx","01-API/api.ts","01-API/00-login-api.ts","04-App/app-reducer.ts","02-Features/01-Login/auth-reducer.ts","02-Features/01-Login/Logout.tsx","02-Features/01-Login/01-selectors.ts","03-Components/SuperComponents/Button/Button.tsx","02-Features/04-Profile/FileInput/FileInput.tsx","02-Features/04-Profile/Profile.tsx","03-Components/SuperComponents/Button/FormButton/UniversalButton.tsx","03-Components/SuperComponents/InputText/UniversalInputText.tsx","03-Components/SuperComponents/DoubleRange/Checkbox/UniversalCheckbox.tsx","04-App/01-selectors.ts","02-Features/01-Login/Login.tsx","02-Features/02-Registration/registration-reducer.ts","01-API/01-regestration-api.ts","02-Features/02-Registration/Registration.tsx","03-Components/SuperComponents/SendingForm/SendingForm.tsx","01-API/02-password-api.ts","02-Features/03-PasswordRecovery/ResetPassword.tsx","02-Features/03-PasswordRecovery/resetPassword-thunks.ts","02-Features/03-PasswordRecovery/PasswordRecovery.tsx","01-API/03-cardsPack-api.ts","02-Features/05-CardPacks/cardPacks-reducer.ts","03-Components/SuperComponents/Modal/Modal.tsx","03-Components/SuperComponents/Modal/ModalForCards/ModalForDelete.tsx","03-Components/SuperComponents/Modal/ModalForCards/ModalForUpdateCardsPack.tsx","02-Features/05-CardPacks/CardPaksElement/CardPacksElement.tsx","03-Components/Paginator/Paginator.tsx","03-Components/SuperComponents/DoubleRange/DoubleRange.tsx","03-Components/SuperComponents/Modal/ModalForPack/ModalForAddPack.tsx","02-Features/05-CardPacks/01-selectors.ts","02-Features/05-CardPacks/CardPacks.tsx","01-API/04-cards-api.ts","02-Features/06-Cards/cards-reducer.ts","03-Components/SuperComponents/Modal/ModalForCards/ModalForUpdateCard.tsx","02-Features/06-Cards/CardElement/CardElement.tsx","03-Components/SuperComponents/Modal/ModalForCards/ModalForAddCard.tsx","02-Features/06-Cards/Cards.tsx","03-Components/NotFound/Error404.tsx","03-Components/ErrorSnackBar/ErrorSnackBar.tsx","02-Features/07-Learning/LearnCardElement/LearnCardElement.tsx","02-Features/07-Learning/LearningPage.tsx","04-App/Routes/Routes.tsx","03-Components/BurgerMenu/menu/menu.jsx","03-Components/BurgerMenu/BurgerMenu.jsx","02-Features/00-Header/Header.tsx","04-App/App.tsx","reportWebVitals.ts","04-App/store.ts","index.tsx","03-Components/BurgerMenu/menu/menu.module.scss","02-Features/04-Profile/FileInput/FileInput.module.scss","03-Components/SuperComponents/Modal/Modal.module.css","03-Components/NotFound/Error404.module.css","03-Components/ErrorSnackBar/ErrorSnackBar.module.css","02-Features/01-Login/Login.module.css","02-Features/05-CardPacks/CardPaksElement/CardPacksElement.module.css","03-Components/SuperComponents/InputText/UniversalnputText.module.css","03-Components/SuperComponents/SendingForm/SendingForm.module.css","02-Features/05-CardPacks/CardPacks.module.css","03-Components/Paginator/Paginator.module.css","02-Features/06-Cards/Cards.module.css","03-Components/SuperComponents/ProgressBar/ProgressBar.module.css","03-Components/SuperComponents/Button/FormButton/UniversalButton.module.css","03-Components/SuperComponents/DoubleRange/Checkbox/UniversalCheckbox.module.css","03-Components/BurgerMenu/Burger.module.scss","02-Features/01-Login/Logout.module.css","03-Components/SuperComponents/Button/Button.module.css","assets/css/dataForm.module.css","02-Features/06-Cards/CardElement/CardElement.module.css","04-App/Routes/Routes.module.css","02-Features/07-Learning/LearningPage.module.css"],"names":["module","exports","ProgressBar","className","s","progress","progressBar","style","width","instance","axios","create","withCredentials","baseURL","authAPI","post","email","password","rememberMe","delete","name","avatar","token","put","initialState","initializedSuccess","appState","status","error","setAppStatus","state","type","isLoggedIn","user","created","isAdmin","publicCardPacksCount","updated","_id","setIsLoggedIn","payload","setUserData","userData","getAuthUserData","dispatch","a","res","data","response","message","updateProfileData","tokenName","updatedUser","Logout","useDispatch","logoutForm","onClick","info","selectorIsAuth","auth","selectorUserData","selectorUserId","Button","children","disabled","button","FileInput","n","useState","file","setFile","baseImage","setBaseImage","uploadImage","e","target","files","convertBase64","base64","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","image_upload","input_label","accept","multiple","photoLoad","onChange","currentTarget","value","length","btn_image_upload","btn_label","sentBtn","file_size","size","toFixed","Profile","useForm","register","handleSubmit","errors","setError","reset","editMode","setEditMode","isAuth","useSelector","authSelectors","profileData","useParams","stylesContainer","container","inner","onSubmit","placeholder","autoFocus","ref","required","validate","src","alt","to","PATH","LOGIN","UniversalButton","red","restProps","finalClassName","default","UniversalInputText","onChangeText","onKeyPress","onEnter","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","key","UniversalCheckbox","onChangeChecked","checkbox","checked","selectorError","app","selectorAppStatus","Login","React","memo","appStatus","appSelectors","setEmail","setPassword","setRememberMe","onclickEmail","useCallback","onclickPassword","onclickHandler","login","REG","activeClassName","activeLink","inactive","PASS_REC","isRedirect","registrationTC","regData","dataReg","then","dataAboutUser","addedUser","Object","keys","setRegistrationAC","catch","in","isEmailValid","isPassValid","passwordRegExp","Registration","isRedirectProfile","registration","onChangeHandlerEmail","onChangeHandlerPassword","SendingForm","formName","formDescription","callback","inputPlaceholder","inputType","buttonName","btnDisabled","navLinkPath","setValue","buttonOnClick","formWrapper","title","passwordAPI","from","resetPasswordToken","ResetPassword","history","useHistory","setTimeout","push","useEffect","resetPassword","PasswordRecovery","sendRecoveryEmail","cardPacksAPI","page","pageCount","packName","min","max","user_id","get","cardsPack","id","cardPacks","currentPage","pageSize","packsTotalCount","showAll","filter","userId","setFilter","getCardPacks","requestPage","cardPacksTotalCount","ModalWindow","active","setActive","modal","modalActive","modalContent","modalContentActive","stopPropagation","btn","ModalForDelete","deleteModalHandlerYes","Modal","ModalForUpdateCardsPack","setTitleCard","updateModalHandler","CardPacksElement","pack","updateCardPacks","removeCardPacks","activeModalDelete","setActiveModalDelete","activeModalUpdate","setActiveModalUpdate","titleCard","cardsCount","LEARNING","CARDS","Paginator","onPageChanged","totalItemsCount","portionSize","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","usersPageNumber","p","map","classnames","selected","pageNumber","DoubleRange","range","setRange","values","step","renderTrack","props","onMouseDown","onTouchStart","height","display","margin","borderRadius","background","getTrackBackground","colors","alignSelf","renderThumb","index","isDragged","backgroundColor","boxShadow","position","top","color","fontWeight","fontSize","fontFamily","padding","ModalForAddPack","addPackHandler","setNamePack","setTypeNewPack","selectorCardPacks","selectorFilter","selectorPacksTotalCount","selectorCurrentPage","selectorPageSize","selectorEditMode","CardPacks","inputValue","setInputValue","activeModalAdd","setActiveModalAdd","namePack","typeNewPack","filtered","serverNum","cardTestObj","Date","getTime","changeCardPacks","getState","mappedPacks","dataForm","search","cards","table","addCardPacks","cardsAPI","card","cardId","grade","card_id","cardsTotalCount","packUserId","getCards","cardsPackId","ModalForUpdateCard","setQuestionCard","setAnswerCard","CardElement","updateCard","removeCard","questionCard","answerCard","question","answer","cardsPack_id","rating","ModalForAddCards","addCardHandler","setNewQuestionCard","setNewAnswerCard","setTypeNewCard","Cards","newQuestionCard","newAnswerCard","typeNewCard","changeCard","packId","updatedCard","console","log","deletedCard","deleteCard","mappedCards","cardsPage","cardsBlock","ModalForAddCard","ErrorPage","errorPage","firstP","secondP","thirdP","item","PROFILE","ErrorSnackBar","notification","closeNotification","text","errorMessage","close","LearnCardElement","setIsChecked","onNextCard","grades","mappedButton","el","getRandomCard","sum","reduce","acc","rand","random","newSum","LearningPage","firstCard","setFirstCard","isChecked","setCard","cardID","setGrade","sendGrade","alert","pageContainer","PASSWORD_POST","CARD_PACKS","ALL_COMPONENTS","Routes","routes","path","exact","render","Menu","header","items","modalRef","useRef","onClickOutsideHandler","event","current","contains","window","addEventListener","removeEventListener","menuActive","menu","menuContent","closeMenu","menuHeader","oneItem","link","activeClass","spy","smooth","offset","duration","BurgerMenu","setMenuActive","burgerBtn","Header","logo","nav","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","actions","newPacks","newCard","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c960d2cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__1Vax3\",\"inner\":\"container_inner__E8m58\",\"link\":\"container_link__2crDV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2qyQj\",\"item\":\"Header_item__2taeP\",\"activeLink\":\"Header_activeLink__1bs4f\",\"nav\":\"Header_nav__mmp92\",\"logo\":\"Header_logo__3pAJj\"};","import React from \"react\";\r\nimport s from \"./ProgressBar.module.css\";\r\n\r\ntype ProgressBarTextPropsType = {\r\n\r\n};\r\n\r\nexport const ProgressBar: React.FC<ProgressBarTextPropsType> = () => {\r\n\r\n    const loadingValue = {\r\n        width: '100%'\r\n    }\r\n\r\n    return <div className={s.progress}>\r\n        <span className={s.progressBar} style={loadingValue}/>\r\n    </div>\r\n}\r\n\r\nexport default ProgressBar;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n     // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n})\r\n\r\nexport type APIResponseType<D = {}> = {\r\n    data: D\r\n    statusText: string\r\n}","import {instance} from './api';\r\nimport {UserDataType} from '../02-Features/01-Login/auth-reducer';\r\n\r\ntype UpdateUserResponse = {\r\n    token: string\r\n    updatedUser: UserDataType\r\n}\r\n\r\nexport const authAPI = {\r\n\r\n    getAuth() {\r\n        return instance.post<UserDataType>(`auth/me`)\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<UserDataType>('auth/login', {email, password, rememberMe})\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete('auth/me')\r\n    },\r\n\r\n    updateProfileData(name?: string, avatar?: string, token?: string) {\r\n        return instance.put<UpdateUserResponse>('auth/me', {name, avatar, token})\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {ThunkDispatch} from 'redux-thunk';\r\nimport {RootStateType} from './store';\r\nimport {getAuthUserData} from '../02-Features/01-Login/auth-reducer';\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatus> | ReturnType<typeof initializedSuccess>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    initializedSuccess: false,\r\n    appState: {\r\n        status: 'idle',\r\n        error: null as string | null\r\n    } as AppState\r\n}\r\n\r\nexport type AppState = {\r\n    status: RequestStatusType,\r\n    error: null | string\r\n}\r\n\r\ntype AppInitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, actions: ActionsType): AppInitialStateType => {\r\n    switch (actions.type) {\r\n        case 'CARDS/APP/SET-APP-STATUS':\r\n            return {...state, appState: actions.state}\r\n        case 'CARDS/APP/INITIALIZED_SUCCESS': {\r\n            return {...state, initializedSuccess: true}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatus = (state: AppState) => ({\r\n    type: 'CARDS/APP/SET-APP-STATUS', state\r\n} as const)\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: 'CARDS/APP/INITIALIZED_SUCCESS'\r\n} as const)\r\n\r\nexport const initializeApp = () => async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n    try {\r\n        await dispatch(getAuthUserData())\r\n        dispatch(initializedSuccess)\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {authAPI} from '../../01-API/00-login-api';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setUserData>\r\n    | ReturnType<typeof updateUserProfile>\r\n\r\nexport type UserDataType = {\r\n    avatar: string,\r\n    created: number,\r\n    email: string,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    token: string,\r\n    updated: number,\r\n    _id: string,\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    user: {\r\n        avatar: '',\r\n        created: 5,\r\n        email: '',\r\n        isAdmin: false,\r\n        name: '',\r\n        publicCardPacksCount: 0,\r\n        rememberMe: false,\r\n        token: '',\r\n        updated: 5,\r\n        _id: '',\r\n    }\r\n}\r\n\r\ntype AuthInitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/LOGIN/SET_IS_AUTH':\r\n            return {...state, isLoggedIn: action.payload.isLoggedIn}\r\n        case 'CARDS/LOGIN/SET_USER_DATA':\r\n            return {...state, user: action.payload.userData}\r\n        case  'CARDS/LOGIN/UPDATE_PROFILE':\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    name: action.payload.user.name,\r\n                    avatar: action.payload.user.avatar\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({\r\n    type: 'CARDS/LOGIN/SET_IS_AUTH', payload: {\r\n        isLoggedIn\r\n    }\r\n}) as const\r\n\r\nexport const setUserData = (userData: UserDataType) => ({\r\n    type: 'CARDS/LOGIN/SET_USER_DATA', payload: {\r\n        userData\r\n    }\r\n}) as const\r\n\r\nexport const updateUserProfile = (user: UserDataType) => ({\r\n    type: 'CARDS/LOGIN/UPDATE_PROFILE', payload: {\r\n        user\r\n    }\r\n} as const)\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await authAPI.login(email, password, rememberMe)\r\n        dispatch(setUserData(res.data))\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await authAPI.getAuth()\r\n        dispatch(setUserData(res.data))\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        dispatch(setIsLoggedIn(false))\r\n        dispatch(setAppStatus({status: 'succeeded', error: res.data.info}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const updateProfileData = (name?: string, avatar?: string, tokenName?: string) =>\r\n    async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n        dispatch(setAppStatus({status: 'loading', error: null}))\r\n        try {\r\n            const res = await authAPI.updateProfileData(name, avatar, tokenName)\r\n            dispatch(updateUserProfile(res.data.updatedUser))\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setAppStatus({status: 'failed', error: error}))\r\n        }\r\n    }\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Logout.module.css';\r\nimport {logout} from './auth-reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\ntype LoginPropsType = {}\r\n\r\nconst Logout: React.FC<LoginPropsType> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let onclickHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <span className={s.logoutForm} onClick={onclickHandler}> LOGOUT</span>\r\n    )\r\n}\r\n\r\nexport default Logout;\r\n","import {RootStateType} from '../../04-App/store';\r\n\r\nexport const selectorIsAuth = (state: RootStateType) => state.auth.isLoggedIn\r\nexport const selectorUserData = (state: RootStateType) => state.auth.user\r\nexport const selectorUserId = (state: RootStateType) => state.auth.user._id\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport style from \"./Button.module.css\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype ButtonPropsType = DefaultInputPropsType & {}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({children,onClick, disabled}) => {\r\n\r\n    return <button className={style.button} disabled={disabled} onClick={onClick}>{children}</button>\r\n\r\n}\r\n\r\nexport default Button;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './FileInput.module.scss'\r\nimport {useDispatch} from 'react-redux';\r\nimport {updateProfileData} from '../../01-Login/auth-reducer';\r\n\r\ninterface IFileInputProps {\r\n\r\n}\r\n\r\nconst FileInput: React.FC<IFileInputProps> = () => {\r\n\r\n    const [file, setFile] = useState<any>();\r\n    const [baseImage, setBaseImage] = useState<any>()\r\n\r\n    const uploadImage = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files && e.target.files[0]\r\n        if (file) {\r\n            setFile(file)\r\n        }\r\n        const base64 = await convertBase64(file)\r\n        setBaseImage(base64)\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n    const updateProfile = () => {\r\n        dispatch(updateProfileData('', baseImage))\r\n        setBaseImage('')\r\n    }\r\n\r\n    const convertBase64 = (file: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader()\r\n            fileReader.readAsDataURL(file)\r\n\r\n            fileReader.onload = (() => {\r\n                resolve(fileReader.result)\r\n            })\r\n\r\n            fileReader.onerror = ((error) => {\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    const returnFileSize = (n: number) => {\r\n        if (n < 1024) {\r\n            return n + 'bytes';\r\n        } else if (n > 1024 && n < 1048576) {\r\n            return (n / 1024).toFixed(2) + 'KB';\r\n        } else if (n > 1048576) {\r\n            return (n / 1048576).toFixed(2) + 'MB';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={s.image_upload}>\r\n                <label className={s.input_label}>\r\n                    <input type=\"file\"\r\n                           accept=\".jpg, .jpeg, .png\"\r\n                           multiple\r\n                           className={s.photoLoad}\r\n                           onChange={(e) => {\r\n                               e.currentTarget.value.length !== 0 &&\r\n                               uploadImage(e)\r\n                           }}/>\r\n                </label>\r\n            </div>\r\n            {baseImage &&\r\n                <div className={s.btn_image_upload}>\r\n                    <label className={s.btn_label}>\r\n                        {\r\n                            <input onClick={updateProfile} className={s.sentBtn}/>\r\n                        }\r\n                        <span className={s.file_size}>{file && returnFileSize(file.size)}</span>\r\n                    </label>\r\n                </div>\r\n            }\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default FileInput;\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {updateProfileData, UserDataType} from '../01-Login/auth-reducer';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport stylesContainer from '../../assets/css/container.module.css';\r\nimport {authSelectors} from '../01-Login/00-index';\r\nimport Button from '../../03-Components/SuperComponents/Button/Button';\r\nimport {useForm} from 'react-hook-form';\r\nimport FileInput from './FileInput/FileInput';\r\n\r\ntype ProfilePropsType = {}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = () => {\r\n\r\n    const {register, handleSubmit, errors, setError, reset} = useForm();\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const isAuth = useSelector<RootStateType, boolean>(authSelectors.selectorIsAuth)\r\n    const profileData = useSelector<RootStateType, UserDataType | null>(authSelectors.selectorUserData)\r\n\r\n    const {token} = useParams<Record<string, string | undefined>>();\r\n    const tokenName = token ? token : ''\r\n\r\n    const dispatch = useDispatch()\r\n    const onSubmit = (data: { name: string }, e: any) => {\r\n        dispatch(updateProfileData(data.name, '', tokenName))\r\n        setEditMode(false)\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <div className={stylesContainer.container}>\r\n\r\n        <div>\r\n            <h4>PROFILE</h4>\r\n            <div className={stylesContainer.inner}>\r\n                <FileInput/>\r\n                <div>\r\n                    {\r\n                        editMode\r\n                            ? <form  onSubmit={handleSubmit(onSubmit)}>\r\n                                <input name='name'\r\n                                       type=\"text\"\r\n                                       placeholder={'Enter name'}\r\n                                       autoFocus\r\n                                       ref={register({\r\n                                           required: true,\r\n                                           validate: value => value.length >= 2\r\n                                       })}\r\n                                />\r\n                                <Button>Save</Button>\r\n                                <Button onClick={() => setEditMode(false)}>Cancel</Button>\r\n                            </form>\r\n                            : <div >\r\n                                <span/>\r\n                                <span>{profileData && profileData.name}</span>\r\n                                <Button onClick={() => setEditMode(true)}\r\n                                >Edit Name</Button>\r\n                            </div>\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <img src={profileData! && profileData.avatar} alt=\"\" width={'50px'}/>\r\n                </div>\r\n                <div\r\n                > {errors.name && 'Your last name is less than 2 characters'}\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <p>{profileData && profileData.publicCardPacksCount}</p>\r\n                        <p>PACKS</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Profile;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./UniversalButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst UniversalButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n            <button\r\n                className={finalClassName}\r\n                {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n            />\r\n    );\r\n}\r\n\r\nexport default UniversalButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./UniversalnputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst UniversalInputText: React.FC<SuperInputTextPropsType> = (\r\n    { value,\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName=`${error ? s.errorInput:s.superInput} ${className ? className:\"\"}`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                type={type}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UniversalInputText;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./UniversalCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst UniversalCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked ???????????????????????\r\n        onChange && onChange(e);\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default UniversalCheckbox;\r\n","import {RootStateType} from './store';\r\n\r\nexport const selectorError = (state: RootStateType) => state.app.appState.error\r\nexport const selectorAppStatus = (state: RootStateType) => state.app.appState.status\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport stylesContainer from '../../assets/css/container.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {getAuthUserData, login} from './auth-reducer';\r\nimport UniversalButton from '../../03-Components/SuperComponents/Button/FormButton/UniversalButton';\r\nimport UniversalInputText from '../../03-Components/SuperComponents/InputText/UniversalInputText';\r\nimport UniversalCheckbox from '../../03-Components/SuperComponents/DoubleRange/Checkbox/UniversalCheckbox';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\n\r\nimport s from '../01-Login/Login.module.css';\r\nimport {selectorIsAuth} from './01-selectors';\r\nimport {appSelectors} from '../../04-App/00-index';\r\n\r\ntype LoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = React.memo(() => {\r\n\r\n    const isAuth = useSelector<RootStateType, boolean>(selectorIsAuth)\r\n    const appStatus = useSelector<RootStateType, string>(appSelectors.selectorAppStatus)\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\r\n\r\n    const onclickEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => setEmail(e.currentTarget.value), [setEmail])\r\n    const onclickPassword = useCallback((e: ChangeEvent<HTMLInputElement>) => setPassword(e.currentTarget.value), [setPassword])\r\n\r\n    const dispatch = useDispatch()\r\n    const onclickHandler = useCallback(() => {\r\n        dispatch(login(email, password, rememberMe))\r\n    }, [email, password, rememberMe, dispatch])\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <div className={stylesContainer.container}>\r\n        <h4>SIGN IN</h4>\r\n        <div className={stylesContainer.inner}>\r\n            <UniversalInputText type={'email'}\r\n                                placeholder={'Enter email'}\r\n                                onChange={onclickEmail}/>\r\n            <UniversalInputText type={'password'}\r\n                                placeholder={'Password'}\r\n                                onChange={onclickPassword}/>\r\n            <UniversalCheckbox onChangeChecked={setRememberMe}>Remember me</UniversalCheckbox>\r\n            <UniversalButton disabled={appStatus === 'loading'}\r\n                             onClick={onclickHandler}> SUBMIT </UniversalButton>\r\n            <hr/>\r\n            <p>Not registered? <NavLink to={PATH.REG}\r\n                                        activeClassName={stylesContainer.activeLink}\r\n                                        className={s.inactive}>Create an Account.</NavLink></p>\r\n            <p>Forgot password? <NavLink to={PATH.PASS_REC}\r\n                                         activeClassName={stylesContainer.activeLink}\r\n                                         className={s.inactive}>Click here to recover.</NavLink></p>\r\n        </div>\r\n    </div>\r\n});\r\n\r\nexport default Login;\r\n","import {Dispatch} from 'redux';\r\nimport {registrationAPI} from '../../01-API/01-regestration-api';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\n\r\ntype ActionsType = ReturnType<typeof setRegistrationAC>\r\n    | ReturnType<typeof setRedirectProfileAC>\r\n    | ReturnType<typeof setAppStatus>\r\n\r\ntype InitialStateType = {\r\n    password: string\r\n    email: string\r\n    isRedirect: boolean\r\n}\r\nexport type RegistrationRequestType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type RegistrationResponseType = {\r\n    addedUser: {\r\n        created: string\r\n        email: string\r\n        isAdmin: boolean\r\n        name: string\r\n        publicCardPacksCount: number\r\n        rememberMe: boolean\r\n        updated: string\r\n        verified: boolean\r\n        __v: number\r\n        _id: string\r\n    }\r\n}\r\nexport type ErrorResponseType = {\r\n    response: {\r\n        data: {\r\n            emailRegExp?: {}\r\n            error: string\r\n            email?: string\r\n            in: string\r\n            isEmailValid?: boolean\r\n            isPassValid?: boolean\r\n            passwordRegExp?: string\r\n        }\r\n    }\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    password: '',\r\n    email: '',\r\n    isRedirect: false,\r\n}\r\n\r\nexport const registrationReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case 'SET-REGISTRATION':\r\n            return {...state, ...actions.regData}\r\n        case 'SET-REDIRECT-PROFILE':\r\n            return {...state, isRedirect: actions.isRedirect}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setRegistrationAC = (regData: RegistrationRequestType) => ({type: 'SET-REGISTRATION', regData} as const)\r\n\r\nexport const setRedirectProfileAC = (isRedirect: boolean) => ({type: 'SET-REDIRECT-PROFILE', isRedirect} as const)\r\n\r\nexport const registrationTC = (regData: RegistrationRequestType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    registrationAPI().registration({...regData})\r\n        .then((res) => {\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n            const dataAboutUser = res.data.addedUser\r\n            if (Object.keys(dataAboutUser).length === 10) {\r\n                dispatch(setRegistrationAC({...regData}))\r\n                dispatch(setRedirectProfileAC(true))\r\n                dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n            }\r\n        })\r\n        .catch((error: ErrorResponseType) => {\r\n            dispatch(setAppStatus({status: 'loading', error: null}))\r\n            if (error.response.data.in === 'createUser') {\r\n                dispatch(setAppStatus({\r\n                    status: 'failed',\r\n                    error: error.response.data.error\r\n                }))\r\n            }\r\n            if (!error.response.data.isEmailValid) {\r\n                dispatch(setAppStatus({\r\n                    status: 'failed',\r\n                    error: error.response.data.error\r\n                }))\r\n            }\r\n            if (!error.response.data.isPassValid) {\r\n                error.response.data.passwordRegExp && dispatch(setAppStatus({\r\n                    status: 'failed',\r\n                    error: error.response.data.passwordRegExp\r\n                }))\r\n            }\r\n        })\r\n}\r\n\r\n","import {RegistrationRequestType, RegistrationResponseType} from '../02-Features/02-Registration/registration-reducer';\r\nimport {instance} from './api';\r\n\r\nexport const registrationAPI = () => {\r\n    return {\r\n        registration: (dataReg: RegistrationRequestType) => {\r\n            return instance.post<RegistrationResponseType>(`auth/register`, {...dataReg})\r\n        }\r\n    }\r\n}\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {registrationTC} from './registration-reducer';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport UniversalInputText from '../../03-Components/SuperComponents/InputText/UniversalInputText';\r\nimport UniversalButton from '../../03-Components/SuperComponents/Button/FormButton/UniversalButton';\r\nimport stylesContainer from '../../assets/css/container.module.css';\r\nimport UniversalCheckbox from '../../03-Components/SuperComponents/DoubleRange/Checkbox/UniversalCheckbox';\r\n\r\nimport s from '../01-Login/Login.module.css';\r\n\r\nconst Registration: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState<string>('xranitelinadejd@gmail.com')\r\n    const [password, setPassword] = useState<string>('KOSTYA1234END.')\r\n    const isRedirectProfile = useSelector<RootStateType, boolean>(state => state.registration.isRedirect)\r\n    const appStatus = useSelector<RootStateType, string>((state) => state.app.appState.status)\r\n\r\n    const onChangeHandlerEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => setEmail(e.currentTarget.value), [])\r\n\r\n    const onChangeHandlerPassword = useCallback((e: ChangeEvent<HTMLInputElement>) => setPassword(e.currentTarget.value), [])\r\n\r\n    const onClickHandler = () => (dispatch(registrationTC({email, password})))\r\n\r\n    if (isRedirectProfile) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <div className={stylesContainer.container}>\r\n        <h4>CREATE A NEW ACCOUNT</h4>\r\n        <div className={stylesContainer.inner}>\r\n            <UniversalInputText type={'text'}\r\n                                value={email}\r\n                                onChange={onChangeHandlerEmail}\r\n                                placeholder={'Email'}/>\r\n            <UniversalInputText type={'password'}\r\n                                value={password}\r\n                                onChange={onChangeHandlerPassword}\r\n                                placeholder={'Password'}/>\r\n            <UniversalCheckbox>I agree to the Terms of Service and Privacy Policy</UniversalCheckbox>\r\n            <UniversalButton onClick={onClickHandler}\r\n                             disabled={appStatus === 'loading'}> SIGN UP </UniversalButton>\r\n            <hr/>\r\n            <p>Already registered? <NavLink to={PATH.LOGIN}\r\n                                            activeClassName={stylesContainer.activeLink}\r\n                                            className={s.inactive}>Sign in to your account.</NavLink></p>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Registration;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './SendingForm.module.css';\r\nimport stylesContainer from '../../../assets/css/container.module.css';\r\nimport UniversalInputText from '../InputText/UniversalInputText';\r\nimport UniversalButton from '../Button/FormButton/UniversalButton';\r\n\r\ntype PropsType = {\r\n    formName: string\r\n    formDescription?: string\r\n    callback: (value1: string, value2?: string | undefined) => void\r\n    status?: string\r\n    inputPlaceholder?: string\r\n    inputType: string\r\n\r\n    buttonName: string\r\n    btnDisabled: boolean\r\n\r\n    navLinkPath?: string\r\n\r\n    restProps?: any\r\n}\r\n\r\nexport const SendingForm: React.FC<PropsType> = (\r\n    {\r\n        formName,\r\n        formDescription,\r\n\r\n        callback,\r\n        status,\r\n        inputPlaceholder,\r\n\r\n        inputType,\r\n        buttonName,\r\n        btnDisabled,\r\n\r\n        navLinkPath,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const inputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const buttonOnClick = () => {\r\n        callback(value)\r\n        //clear local state field\r\n        setValue('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.formWrapper}>\r\n            <h4>{formName}</h4>\r\n            <div className={stylesContainer.inner}>\r\n                <h3 className={s.title}>{formDescription}</h3>\r\n                {\r\n                    status && <span>{status}</span>\r\n                }\r\n                <div>\r\n                    <div>\r\n                        <UniversalInputText type={inputType}\r\n                                            onEnter={buttonOnClick}\r\n                                            value={value}\r\n                                            placeholder={inputPlaceholder && inputPlaceholder}\r\n                                            onChange={inputHandler}/>\r\n                        <UniversalButton onClick={buttonOnClick}\r\n                                         disabled={btnDisabled}>{buttonName}\r\n                        </UniversalButton>\r\n                        <hr/>\r\n                        <p> Let's <NavLink to={navLinkPath ? navLinkPath : ''}\r\n                                           activeClassName={stylesContainer.activeLink} className={s.inactive}>\r\n                            Sign in </NavLink></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import {APIResponseType, instance} from './api';\r\n\r\nexport type PasswordRecoveryType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\n\r\nexport type SetNewPasswordType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport const passwordAPI = {\r\n    recover(email: string) {\r\n        return instance.post<APIResponseType<PasswordRecoveryType>>('auth/forgot', {\r\n            email: email,\r\n            from: 'test-front-admin <serega.kuharionok@yandex.ru>',\r\n            message: `<div style=\"background-color: #00ff00; padding: 15px\">\r\n                            password recovery link: \r\n                     <a href='http://localhost:3000/FridayProject#/newPassword/$token$'>Click</a>\r\n                     </div>`\r\n        });\r\n    },\r\n\r\n    resetPassword(password: string, token: string | undefined) {\r\n        return instance.post<APIResponseType<SetNewPasswordType>>('auth/set-new-password', {\r\n            password,\r\n            resetPasswordToken: token\r\n        });\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {SendingForm} from '../../03-Components/SuperComponents/SendingForm/SendingForm';\r\nimport {resetPassword} from './resetPassword-thunks';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport stylesContainer from '../../assets/css/container.module.css';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\n\r\nexport const ResetPassword: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<Record<string, string | undefined>>();\r\n    const history = useHistory();\r\n\r\n    const appStatus = useSelector<RootStateType, string>((state) => state.app.appState.status)\r\n\r\n    const tokenName = token ? token : ''\r\n\r\n    const resetOldPassword = (password: string) => {\r\n        dispatch(resetPassword(password, tokenName))\r\n\r\n    }\r\n\r\n    const redirect = () => {\r\n        history.push(PATH.LOGIN);\r\n    }\r\n\r\n    //redirect\r\n    if (appStatus === 'succeeded') {\r\n        setTimeout(redirect, 3000)\r\n    }\r\n\r\n    //clear status\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            dispatch(setAppStatus({status: 'idle', error: null}))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={stylesContainer.container}>\r\n            <SendingForm formName={'RESET PASSWORD'}\r\n                         formDescription={`Create a new, strong password that you don't use for other websites`}\r\n                         callback={resetOldPassword}\r\n                         inputPlaceholder={'enter your new password'}\r\n                         inputType={'password'}\r\n                         buttonName={'Reset'}\r\n                         btnDisabled={appStatus === 'loading'}\r\n                         navLinkPath={PATH.LOGIN}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {passwordAPI} from '../../01-API/02-password-api';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\n\r\nexport const sendRecoveryEmail = (email: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await passwordAPI.recover(email)\r\n        if (res.status === 200) {\r\n            dispatch(setAppStatus({\r\n                status: 'succeeded',\r\n                error: `if account \"${email}\" exist, an email will be sent with further instruction`\r\n            }))\r\n        } else {\r\n            dispatch(setAppStatus({status: 'failed', error: 'Something went wrong:('}))\r\n        }\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const resetPassword = (password: string, token: string | undefined) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await passwordAPI.resetPassword(password, token)\r\n        if (res.status === 200) {\r\n            dispatch(setAppStatus({status: 'succeeded', error: 'The password change is successful'}))\r\n        } else {\r\n            dispatch(setAppStatus({status: 'failed', error: 'Something went wrong:('}))\r\n        }\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SendingForm} from '../../03-Components/SuperComponents/SendingForm/SendingForm';\r\nimport {sendRecoveryEmail} from './resetPassword-thunks';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport stylesContainer from '../../assets/css/container.module.css';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\nimport {appSelectors} from '../../04-App/00-index';\r\n\r\nexport const PasswordRecovery: React.FC = () => {\r\n\r\n    const appStatus = useSelector<RootStateType, string>(appSelectors.selectorAppStatus)\r\n\r\n    const sendEmail = (email: string) => {\r\n        dispatch(sendRecoveryEmail(email))\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setAppStatus({status: 'idle', error: null}))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={stylesContainer.container}>\r\n            <SendingForm formName={'RECOVERY PASSWORD'}\r\n                         formDescription={`Enter the email address you used to register and we'll send you the instruction`}\r\n                         callback={sendEmail}\r\n                         inputPlaceholder={'enter your email address'}\r\n                         inputType={'email'}\r\n                         buttonName={'Send'}\r\n                         btnDisabled={appStatus === 'loading'}\r\n                         navLinkPath={PATH.LOGIN}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {instance} from './api';\r\nimport {CardPacksType} from '../02-Features/05-CardPacks/cardPacks-reducer';\r\n\r\nexport const cardPacksAPI = {\r\n    getCardPacks(page: number, pageCount: number, packName: string = '', min: number, max: number, user_id: string) {\r\n        return instance.get<GetCardPacksResponseType>(`cards/pack?page=${page}&pageCount=${pageCount}&packName=${packName}&min=${min}&max=${max}&user_id=${user_id}`);\r\n    },\r\n    createCardsPack(cardsPack: CardPacksType) {\r\n        return instance.post('cards/pack', {cardsPack});\r\n    },\r\n    updateCardsPack(cardsPack: CardPacksType) {\r\n        return instance.put('cards/pack', {cardsPack});\r\n    },\r\n    deleteCardsPack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`);\r\n    }\r\n}\r\n\r\ntype GetCardPacksResponseType = {\r\n    cardPacks: CardPacksType[],\r\n    page: number,\r\n    pageCount: number,\r\n    cardPacksTotalCount: number,\r\n    minCardsCount: number,\r\n    maxCardsCount: number,\r\n    token: string,\r\n    tokenDeathTime: string\r\n}\r\n\r\nexport type UpdateCardsPackType = {\r\n    _id: string,\r\n    name: string\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\nimport {cardPacksAPI} from '../../01-API/03-cardsPack-api';\r\nimport {RootStateType} from '../../04-App/store';\r\n\r\ntype ActionsType = ReturnType<typeof setCardPacks>\r\n    | ReturnType<typeof setFilter>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setPacksTotalCount>\r\n    | ReturnType<typeof createCardPacks>\r\n    | ReturnType<typeof showMode>\r\n\r\nexport type CardPacksType = {\r\n    _id: string\r\n    user_id?: string\r\n    user_name?: string\r\n    private?: boolean\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    cardsCount?: number | undefined\r\n    type: string\r\n    rating?: number\r\n    created?: string | undefined\r\n    updated?: string\r\n    more_id?: string\r\n    __v?: number\r\n}\r\n\r\nexport type CardPacksFilterType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    userId: string,\r\n}\r\n\r\nconst initialState = {\r\n    cardPacks: [] as CardPacksType[],\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    packsTotalCount: 5,\r\n    showAll: false,\r\n    filter: {\r\n        packName: '',\r\n        min: 0,\r\n        max: 15,\r\n        userId: '',\r\n    } as CardPacksFilterType\r\n}\r\n\r\nexport type CardsPackInitialStateType = typeof initialState\r\n\r\nexport const cardPacksReducer = (state = initialState, actions: ActionsType): CardsPackInitialStateType => {\r\n    switch (actions.type) {\r\n        case 'CARDS/CARD-PACKS/SET-CURRENT-PAGE':\r\n            return {...state, currentPage: actions.currentPage};\r\n        case 'CARDS/CARD-PACKS/SET-PACKS-TOTAL-COUNT':\r\n            return {...state, packsTotalCount: actions.packsTotalCount};\r\n        case 'CARDS/CARD-PACKS/SET-FILTER':\r\n            return {...state, filter: actions.filter}\r\n        case 'CARDS/CARD-PACKS/SET-SHOW-MODE':\r\n            return {...state, showAll: actions.value}\r\n        case 'CARDS/CARD-PACKS/SET-CARDS':\r\n            return {...state, cardPacks: actions.cardPacks}\r\n        case 'CARDS/CARD-PACKS/ADD-CARDS':\r\n            return {...state, cardPacks: [actions.newPacks, ...state.cardPacks]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCardPacks = (cardPacks: CardPacksType[]) => ({type: 'CARDS/CARD-PACKS/SET-CARDS', cardPacks} as const)\r\nexport const createCardPacks = (newPacks: CardPacksType) => ({type: 'CARDS/CARD-PACKS/ADD-CARDS', newPacks} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-CURRENT-PAGE',\r\n    currentPage\r\n} as const)\r\nexport const setPacksTotalCount = (packsTotalCount: number) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-PACKS-TOTAL-COUNT',\r\n    packsTotalCount\r\n} as const)\r\nexport const setFilter = (filter: CardPacksFilterType) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-FILTER', filter\r\n} as const)\r\nexport const showMode = (value: boolean) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-SHOW-MODE', value\r\n} as const)\r\n\r\nexport const getCardPacks = (requestPage: number, pageSize: number, filter: CardPacksFilterType) => async (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    dispatch(setCurrentPage(requestPage))\r\n    dispatch(setFilter(filter))\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n\r\n    try {\r\n        const res = await cardPacksAPI.getCardPacks(requestPage, pageSize, filter.packName, filter.min, filter.max, filter.userId)\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        dispatch(setCardPacks(res.data.cardPacks))\r\n        dispatch(setPacksTotalCount(res.data.cardPacksTotalCount))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const addCardPacks = (cardPacks: CardPacksType) => async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\r\n\r\n    const requestPage = getState().cardPacks.currentPage\r\n    const pageSize = getState().cardPacks.pageSize\r\n    const filter = getState().cardPacks.filter\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n\r\n    try {\r\n        await cardPacksAPI.createCardsPack(cardPacks)\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        dispatch(getCardPacks(requestPage, pageSize, filter))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const updateCardPacks = (cardsPack: CardPacksType) => async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\r\n\r\n    const requestPage = getState().cardPacks.currentPage\r\n    const pageSize = getState().cardPacks.pageSize\r\n    const filter = getState().cardPacks.filter\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n\r\n    try {\r\n        await cardPacksAPI.updateCardsPack(cardsPack)\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        dispatch(getCardPacks(requestPage, pageSize, filter))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\nexport const deleteCardPacks = (id: string) => async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\r\n\r\n    const requestPage = getState().cardPacks.currentPage\r\n    const pageSize = getState().cardPacks.pageSize\r\n    const filter = getState().cardPacks.filter\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n\r\n    const res = await cardPacksAPI.deleteCardsPack(id)\r\n    try {\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        dispatch(getCardPacks(requestPage, pageSize, filter))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Modal.module.css'\r\n\r\n\r\ntype ModalPropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void\r\n}\r\n\r\nconst ModalWindow: React.FC<ModalPropsType> = ({active, setActive, children}) => {\r\n    return <div className={active ? `${s.modal} + ${s.modalActive}` : s.modal} onClick={() => setActive(false)}>\r\n        <div className={active ? `${s.modalContent} + ${s.modalContentActive}` : s.modalContent}\r\n             onClick={(e) => e.stopPropagation()}>\r\n            <button className={s.btn} onClick={() => setActive(false)}>x</button>\r\n            {children}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ModalWindow;\r\n","import React from 'react';\r\nimport ModalWindow from '../Modal';\r\nimport UniversalButton from '../../Button/FormButton/UniversalButton';\r\n\r\n\r\ntype ModalDeletePropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void,\r\n    deleteModalHandlerYes: () => void\r\n}\r\n\r\nconst ModalForDelete: React.FC<ModalDeletePropsType> = ({deleteModalHandlerYes, setActive, active}) => {\r\n    const deleteModalHandlerNo = () => {\r\n        setActive(false)\r\n    }\r\n    return <div>\r\n        <ModalWindow active={active} setActive={setActive}>\r\n            <h4>ARE YOU SURE?</h4>\r\n            <UniversalButton onClick={deleteModalHandlerYes}>Yes</UniversalButton>\r\n            <UniversalButton onClick={deleteModalHandlerNo}>No</UniversalButton>\r\n        </ModalWindow>\r\n    </div>\r\n\r\n}\r\n\r\nexport default ModalForDelete;","import React, {ChangeEvent} from 'react';\r\nimport ModalWindow from '../Modal';\r\nimport UniversalInputText from '../../InputText/UniversalInputText';\r\nimport UniversalButton from '../../Button/FormButton/UniversalButton';\r\n\r\n\r\ntype ModalUpdatePropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void,\r\n    setTitleCard: (t: string) => void,\r\n    updateModalHandler: () => void\r\n}\r\n\r\nconst ModalForUpdateCardsPack: React.FC<ModalUpdatePropsType> = ({setActive, active, setTitleCard, updateModalHandler}) => {\r\n\r\n    const handlerForUpdateTitleCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleCard(e.currentTarget.value)\r\n    }\r\n    const updateModalHandlerCancel = () => {\r\n        setActive(false)\r\n    }\r\n    return <div>\r\n        <ModalWindow active={active} setActive={setActive}>\r\n            <h4>HERE YOU CAN CHANGE THIS PACK</h4>\r\n            <UniversalInputText type={'text'} onChange={handlerForUpdateTitleCard} placeholder={'Write a new title for pack'}/>\r\n            <UniversalButton onClick={updateModalHandler}>Update</UniversalButton>\r\n            <UniversalButton onClick={updateModalHandlerCancel}>Cancel</UniversalButton>\r\n        </ModalWindow>\r\n    </div>\r\n}\r\n\r\nexport default ModalForUpdateCardsPack;","import React, {useState} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport ModalForDeleteCardsPack from '../../../03-Components/SuperComponents/Modal/ModalForCards/ModalForDelete';\r\nimport ModalForUpdateCardsPack\r\n    from '../../../03-Components/SuperComponents/Modal/ModalForCards/ModalForUpdateCardsPack';\r\nimport {PATH} from '../../../04-App/Routes/Routes';\r\nimport Button from '../../../03-Components/SuperComponents/Button/Button';\r\nimport {useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../../04-App/store';\r\nimport s from './CardPacksElement.module.css'\r\nimport {CardPacksType} from '../cardPacks-reducer';\r\n\r\ntype CardPropsType = {\r\n    pack: CardPacksType\r\n    updateCardPacks: (cardsPack: CardPacksType) => void\r\n    removeCardPacks: (id: string) => void\r\n}\r\n\r\nconst CardPacksElement: React.FC<CardPropsType> = (\r\n    {\r\n        pack,\r\n        updateCardPacks,\r\n        removeCardPacks,\r\n    }) => {\r\n\r\n    const onUpdateHandler = () => {\r\n        setActiveModalUpdate(true)\r\n    }\r\n    const onRemoveHandler = () => {\r\n        setActiveModalDelete(true)\r\n    }\r\n\r\n    //for modal\r\n    const [activeModalDelete, setActiveModalDelete] = useState<boolean>(false)\r\n    const [activeModalUpdate, setActiveModalUpdate] = useState<boolean>(false)\r\n    const [titleCard, setTitleCard] = useState<string>('')\r\n    //for delete\r\n    const deleteModalHandlerYes = () => {\r\n        removeCardPacks(pack._id)\r\n    }\r\n\r\n    //for update\r\n    const updateModalHandler = () => {\r\n        updateCardPacks && updateCardPacks({_id: pack._id, name: titleCard, type: 'bla-type'})\r\n        setActiveModalUpdate(false)\r\n        setTitleCard('')\r\n    }\r\n    //for disabled\r\n    const userId = useSelector<RootStateType, string>(state => state.auth.user._id)\r\n\r\n    return (<>\r\n            <tr>\r\n                <td>{pack.name}</td>\r\n                <td>{pack.cardsCount ? pack.cardsCount : `empty`}</td>\r\n                <td><Button onClick={onUpdateHandler} disabled={pack.user_id !== userId}>Update</Button></td>\r\n                <td><Button onClick={onRemoveHandler} disabled={pack.user_id !== userId}>Delete</Button></td>\r\n                <td><NavLink className={s.inactive} activeClassName={s.active}\r\n                             to={PATH.LEARNING + '/' + pack._id}>Learn</NavLink></td>\r\n                <td><NavLink className={s.inactive} activeClassName={s.active}\r\n                             to={PATH.CARDS + '/' + pack._id}>Cards</NavLink></td>\r\n            </tr>\r\n            <ModalForDeleteCardsPack active={activeModalDelete} setActive={setActiveModalDelete}\r\n                                     deleteModalHandlerYes={deleteModalHandlerYes}/>\r\n            <ModalForUpdateCardsPack active={activeModalUpdate} setActive={setActiveModalUpdate}\r\n                                     setTitleCard={setTitleCard}\r\n                                     updateModalHandler={updateModalHandler}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardPacksElement\r\n","import React, {useState} from 'react'\r\nimport classnames from 'classnames'\r\nimport {Button} from '../SuperComponents/Button/Button'\r\n\r\nimport s from './Paginator.module.css'\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = (\r\n    {currentPage, onPageChanged, pageSize, totalItemsCount, portionSize = 10}\r\n) => {\r\n\r\n    const pageCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    const pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize + 1\r\n\r\n    const prevPortionNumberHandler = () => {\r\n        setPortionNumber(portionNumber - 1)\r\n    }\r\n\r\n    const nextPortionNumberHandler = () => setPortionNumber(portionNumber + 1)\r\n\r\n    return (\r\n        <div className={s.usersPageNumber}>\r\n            {portionNumber > 1\r\n            && <Button onClick={prevPortionNumberHandler}>PREV</Button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p, i) => {\r\n                    return <span key={`number_items${i}`}\r\n                                 className={classnames({\r\n                                     [s.selected]: currentPage === p\r\n                                 }, s.pageNumber)}\r\n                                 onClick={() => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber\r\n            && <Button onClick={nextPortionNumberHandler}>NEXT</Button>}\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport {getTrackBackground, Range} from 'react-range';\r\n\r\ntype DoubleRangePropsType = {\r\n    range: Array<number>,\r\n    setRange: (newValues: Array<number>) => void\r\n}\r\n\r\nconst DoubleRange: React.FC<DoubleRangePropsType> = ({range, setRange, children}) => {\r\n\r\n    return (\r\n        <Range\r\n            values={range}\r\n            step={1}\r\n            min={0}\r\n            max={15}\r\n            onChange={values => setRange(values)}\r\n            renderTrack={({props, children}) => (\r\n                <div\r\n                    onMouseDown={props.onMouseDown}\r\n                    onTouchStart={props.onTouchStart}\r\n                    style={{\r\n                        ...props.style,\r\n                        height: '36px',\r\n                        display: 'flex',\r\n                        width: '95%',\r\n                        margin: '0px',\r\n                    }}\r\n                >\r\n                    <div\r\n                        ref={props.ref}\r\n                        style={{\r\n                            height: '5px',\r\n                            width: '100%',\r\n                            borderRadius: '4px',\r\n                            background: getTrackBackground({\r\n                                values: range,\r\n                                colors: ['#ccc', '#2d4052', '#ccc'],\r\n                                min: range[0],\r\n                                max: range[1]\r\n\r\n                            }),\r\n                            alignSelf: 'center'\r\n                        }}\r\n                    >\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            renderThumb={({index, props, isDragged}) => (\r\n                <div\r\n                    {...props}\r\n                    style={{\r\n                        ...props.style,\r\n                        height: '12px',\r\n                        width: '12px',\r\n                        borderRadius: '1px',\r\n                        backgroundColor: '#FFF',\r\n                        boxShadow: '0px 2px 6px #AAA',\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            top: '-28px',\r\n                            color: '#fff',\r\n                            fontWeight: 'bold',\r\n                            fontSize: '14px',\r\n                            fontFamily: 'Arial,Helvetica Neue,Helvetica,sans-serif',\r\n                            padding: '4px',\r\n                            borderRadius: '4px',\r\n                            backgroundColor: '#2d4052'\r\n                        }}\r\n                    >\r\n                        {range[index].toFixed(0)}\r\n                    </div>\r\n                    <div style={{height: '16px', width: '5px', backgroundColor: isDragged ? '#2d4052' : '#CCC'}}/>\r\n                </div>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default DoubleRange","import React, {ChangeEvent} from 'react';\r\nimport ModalWindow from '../Modal';\r\nimport UniversalInputText from '../../InputText/UniversalInputText';\r\nimport UniversalButton from '../../Button/FormButton/UniversalButton';\r\n\r\n\r\ntype ModalAddPropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void\r\n    addPackHandler: () => void,\r\n    setNamePack: (e: string) => void,\r\n    setTypeNewPack: (e: string) => void\r\n}\r\n\r\nconst ModalForAddPack: React.FC<ModalAddPropsType> = ({\r\n                                                          active, setActive,\r\n                                                          addPackHandler, setNamePack, setTypeNewPack\r\n                                                      }) => {\r\n\r\n\r\n    const handlerForAddNamePack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNamePack(e.currentTarget.value)\r\n\r\n    }\r\n    const handlerForAddTypeNewPack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTypeNewPack(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const addCardHandlerCancel = () => {\r\n        setActive(false)\r\n    }\r\n    return <div>\r\n        <ModalWindow active={active} setActive={setActive}>\r\n            <h4>ADD NEW PACK</h4>\r\n            <p>TITLE NEW PACK</p><UniversalInputText type={'text'} onChange={handlerForAddNamePack}\r\n                                                     placeholder={'Write title here'}/>\r\n            <p>TYPE NEW PACK</p> <UniversalInputText type={'text'} onChange={handlerForAddTypeNewPack}\r\n                                                     placeholder={'Write type of card pack here'}/>\r\n            <UniversalButton onClick={addPackHandler}>ADD</UniversalButton>\r\n            <UniversalButton onClick={addCardHandlerCancel}>CANCEL</UniversalButton>\r\n        </ModalWindow>\r\n    </div>\r\n\r\n}\r\n\r\nexport default ModalForAddPack;\r\n","import {RootStateType} from '../../04-App/store';\r\n\r\nexport const selectorCardPacks = (state: RootStateType) => state.cardPacks.cardPacks\r\nexport const selectorFilter = (state: RootStateType) => state.cardPacks.filter\r\nexport const selectorPacksTotalCount = (state: RootStateType) => state.cardPacks.packsTotalCount\r\nexport const selectorCurrentPage = (state: RootStateType) => state.cardPacks.currentPage\r\nexport const selectorPageSize = (state: RootStateType) => state.cardPacks.pageSize\r\nexport const selectorEditMode = (state: RootStateType) => state.cardPacks.showAll\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport style from '../../assets/css/dataForm.module.css'\r\nimport s from './CardPacks.module.css'\r\nimport {\r\n    addCardPacks,\r\n    CardPacksFilterType,\r\n    CardPacksType,\r\n    deleteCardPacks,\r\n    getCardPacks,\r\n    showMode,\r\n    updateCardPacks\r\n} from '../05-CardPacks/cardPacks-reducer';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport CardPacksElement from './CardPaksElement/CardPacksElement';\r\nimport {Paginator} from '../../03-Components/Paginator/Paginator';\r\nimport DoubleRange from '../../03-Components/SuperComponents/DoubleRange/DoubleRange';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport UniversalInputText from '../../03-Components/SuperComponents/InputText/UniversalInputText';\r\nimport UniversalCheckbox from '../../03-Components/SuperComponents/DoubleRange/Checkbox/UniversalCheckbox';\r\nimport UniversalButton from '../../03-Components/SuperComponents/Button/FormButton/UniversalButton';\r\nimport ModalForAddPack from '../../03-Components/SuperComponents/Modal/ModalForPack/ModalForAddPack';\r\nimport {authSelectors} from '../01-Login/00-index';\r\nimport {\r\n    selectorCardPacks,\r\n    selectorCurrentPage, selectorEditMode,\r\n    selectorFilter,\r\n    selectorPacksTotalCount,\r\n    selectorPageSize\r\n} from './01-selectors';\r\nimport {UserDataType} from '../01-Login/auth-reducer';\r\nimport {selectorUserData} from '../01-Login/01-selectors';\r\n\r\nconst CardPacks: React.FC = () => {\r\n    const isAuth = useSelector<RootStateType, boolean>(authSelectors.selectorIsAuth)\r\n    const cardPacks = useSelector<RootStateType, CardPacksType[]>(selectorCardPacks)\r\n\r\n    //filter data\r\n    const packsTotalCount = useSelector<RootStateType, number>(selectorPacksTotalCount)\r\n    const filter = useSelector<RootStateType, CardPacksFilterType>(selectorFilter)\r\n    const currentPage = useSelector<RootStateType, number>(selectorCurrentPage)\r\n    const pageSize = useSelector<RootStateType, number>(selectorPageSize)\r\n    const editMode = useSelector<RootStateType, boolean>(selectorEditMode)\r\n\r\n    const userData = useSelector<RootStateType, UserDataType | null>(selectorUserData)\r\n\r\n    //filter state\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [range, setRange] = useState([0, 15])\r\n\r\n    //for modal\r\n    const [activeModalAdd, setActiveModalAdd] = useState<boolean>(false)\r\n    const [namePack, setNamePack] = useState<string>('')\r\n    const [typeNewPack, setTypeNewPack] = useState<string>('undefined')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onPageChanged = useCallback((currentPage: number) => {\r\n        dispatch(getCardPacks(currentPage, pageSize, filtered))\r\n    }, [currentPage])\r\n\r\n    const onSearch = () => dispatch(getCardPacks(currentPage, pageSize, filtered))\r\n    const showOwnPack = (e: ChangeEvent<HTMLInputElement>) => dispatch(showMode(e.target.checked))\r\n    const inputHandler = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value)\r\n\r\n    const filtered: CardPacksFilterType = {\r\n        packName: inputValue,\r\n        min: range[0],\r\n        max: range[1],\r\n        userId: editMode && userData ? userData._id : ''\r\n    }\r\n\r\n    function genID(serverNum: number) {\r\n        return (serverNum + '' + (new Date).getTime());\r\n    }\r\n\r\n    const cardTestObj: CardPacksType = {\r\n        _id: genID(5),\r\n        name: namePack,\r\n        type: typeNewPack\r\n    }\r\n\r\n    const onAddCardPacks = () => {\r\n        setActiveModalAdd(true)\r\n    }\r\n    const addPackHandler = () => {\r\n        dispatch(addCardPacks(cardTestObj))\r\n        setActiveModalAdd(false)\r\n    }\r\n    const changeCardPacks = (cardsPack: CardPacksType) => {\r\n        dispatch(updateCardPacks(cardsPack))\r\n    }\r\n    const removeCardPacks = (_id: string) => {\r\n        dispatch(deleteCardPacks(_id))\r\n    }\r\n\r\n    const mappedPacks = cardPacks.map((p: CardPacksType) =>\r\n        <CardPacksElement key={p._id}\r\n                          pack={p}\r\n                          updateCardPacks={changeCardPacks}\r\n                          removeCardPacks={removeCardPacks}/>)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardPacks(currentPage, pageSize, filter))\r\n    }, [])\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (<>\r\n            <div className={style.dataForm}>\r\n                <div className={s.search}>\r\n                    <h4>FORM FOR SEARCH</h4>\r\n                    <DoubleRange range={range} setRange={setRange}/>\r\n                    <UniversalInputText onChange={inputHandler} placeholder={'search...'}/>\r\n                    <UniversalCheckbox\r\n                        checked={true}//!!!!!!\r\n                        onChange={showOwnPack}>\r\n                        Show only mine pack\r\n                    </UniversalCheckbox>\r\n                    <UniversalButton onClick={onSearch}>Search</UniversalButton>\r\n                    <UniversalButton onClick={onAddCardPacks}>Add new CardPack</UniversalButton>\r\n                </div>\r\n                <div className={s.cards}>\r\n                    <Paginator currentPage={currentPage}\r\n                               onPageChanged={onPageChanged}\r\n                               pageSize={pageSize}\r\n                               totalItemsCount={packsTotalCount}/>\r\n                    <table className={s.table}>\r\n                        <tbody> {\r\n                            mappedPacks\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <ModalForAddPack active={activeModalAdd} setActive={setActiveModalAdd} addPackHandler={addPackHandler}\r\n                             setNamePack={setNamePack} setTypeNewPack={setTypeNewPack}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardPacks\r\n","import {instance} from './api';\r\nimport {CardType} from '../02-Features/06-Cards/cards-reducer';\r\n\r\nexport const cardsAPI = {\r\n    getCards(id: string) {\r\n        return instance.get<GetCardsResponseType>(`cards/card?cardsPack_id=${id ? id : ''}`)\r\n    },\r\n\r\n    createCard(card: CardType) {\r\n        return instance.post('cards/card', {card});\r\n    },\r\n\r\n    updateCard(card: CardType) {\r\n        return instance.put<UpdatedCardResponseType>('cards/card', {card});\r\n    },\r\n\r\n    deleteCard(cardId: string) {\r\n        return instance.delete<DeleteCardResponseType>(`cards/card/?id=${cardId}`);\r\n    },\r\n\r\n    sendGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdateGradeCardResponse>('cards/grade', {grade, card_id});\r\n    },\r\n}\r\n\r\ntype GetCardsResponseType = {\r\n    cards: CardType[],\r\n    page: number,\r\n    pageCount: number,\r\n    cardsTotalCount: number,\r\n    packUserId: string,\r\n}\r\n\r\ntype DeleteCardResponseType = {\r\n    deletedCard: {\r\n        cardsPack_id: string\r\n    }\r\n}\r\n\r\ntype UpdatedCardResponseType = {\r\n    updatedCard: {\r\n        cardsPack_id: string\r\n    }\r\n}\r\n\r\nexport type UpdateGradeCard = {\r\n    grade: number\r\n    card_id: string\r\n}\r\n\r\ntype UpdateGradeCardResponse = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {cardsAPI} from '../../01-API/04-cards-api';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\n\r\ntype ActionsType = ReturnType<typeof setCards>\r\n    | ReturnType<typeof setFilter>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setGrade>\r\n    | ReturnType<typeof createCard>\r\n\r\nexport type CardType = {\r\n    answer: string,\r\n    question: string,\r\n    cardsPack_id: string,\r\n    grade: number,\r\n    rating: number,\r\n    shots?: number,\r\n    type: string,\r\n    user_id?: string,\r\n    created?: string,\r\n    updated?: string,\r\n    __v?: 0,\r\n    _id: string,\r\n}\r\n\r\nexport type CardsFilterType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n}\r\n\r\nconst initialState = {\r\n    cards: [] as CardType[],\r\n    page: 1,\r\n    pageCount: 3,\r\n    cardsTotalCount: 5,\r\n    packUserId: '',\r\n    filter: {\r\n        packName: '',\r\n        min: 0,\r\n        max: 15,\r\n    } as CardsFilterType\r\n} as const\r\n\r\nexport type CardsInitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: CardsInitialStateType = initialState, actions: ActionsType): CardsInitialStateType => {\r\n    switch (actions.type) {\r\n        case 'CARDS/CARDS/SET-FILTER':\r\n            return {...state, filter: actions.payload.filter}\r\n        case 'CARDS/CARDS/SET-CARDS':\r\n            return {...state, cards: actions.cards}\r\n        case 'CARDS/CARDS/ADD-CARD':\r\n            return {...state, cards: [actions.newCard, ...state.cards]}\r\n        case 'CARDS/CARDS/SET-GRADE':\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(\r\n                    (card, i) => card._id === actions.payload.id\r\n                        ? {...card, grade: actions.payload.grade}\r\n                        : card\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const setCards = (cards: CardType[]) => ({type: 'CARDS/CARDS/SET-CARDS', cards} as const)\r\n\r\nexport const createCard = (newCard: CardType) => ({type: 'CARDS/CARDS/ADD-CARD', newCard} as const)\r\n\r\nexport const setFilter = (filter: CardsFilterType) => ({\r\n    type: 'CARDS/CARDS/SET-FILTER', payload: {\r\n        filter\r\n    }\r\n} as const)\r\n\r\nexport const setGrade = (grade: number, id: string) => ({\r\n    type: 'CARDS/CARDS/SET-GRADE',\r\n    payload: {\r\n        id,\r\n        grade\r\n    }\r\n} as const)\r\n\r\n//Thunks\r\nexport const getCards = (cardsPackId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    cardsAPI.getCards(cardsPackId)\r\n        .then(res => {\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n            dispatch(setCards(res.data.cards))\r\n        })\r\n}\r\n\r\nexport const addCard = (card: CardType) => (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    cardsAPI.createCard(card)\r\n        .then(res => {\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n            dispatch(getCards(card.cardsPack_id))\r\n            console.log(card)\r\n        })\r\n}\r\n\r\nexport const updateCard = (card: CardType) => (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    cardsAPI.updateCard(card)\r\n        .then(res => {\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n            const packId = res.data.updatedCard.cardsPack_id\r\n            dispatch(getCards(packId))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const deleteCard = (id: string) => (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    cardsAPI.deleteCard(id)\r\n        .then(res => {\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n            const packId = res.data.deletedCard.cardsPack_id\r\n            dispatch(getCards(packId))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const sendGrade = (grade: number, card_id: string) => (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    cardsAPI.sendGrade(grade, card_id)\r\n        .then(res => {\r\n            dispatch(setAppStatus({status: 'succeeded', error: 'Sent'}))\r\n            const cardID = res.data._id\r\n            const grade = res.data.grade\r\n            dispatch(setGrade(grade, cardID))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppStatus({status: 'succeeded', error: error}))\r\n        })\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport ModalWindow from '../Modal';\r\nimport UniversalInputText from '../../InputText/UniversalInputText';\r\nimport UniversalButton from '../../Button/FormButton/UniversalButton';\r\n\r\n\r\ntype ModalUpdatePropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void,\r\n    setQuestionCard: (q: string) => void,\r\n    setAnswerCard: (a: string) => void,\r\n    updateModalHandler: () => void\r\n}\r\n\r\nconst ModalForUpdateCard: React.FC<ModalUpdatePropsType> = ({setActive, active, setQuestionCard, setAnswerCard, updateModalHandler}) => {\r\n    const handlerForUpdateQuestionCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestionCard(e.currentTarget.value)\r\n    }\r\n    const handlerForUpdateAnswerCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswerCard(e.currentTarget.value)\r\n    }\r\n    const updateModalHandlerCancel = () => {\r\n        setActive(false)\r\n    }\r\n\r\n    return <div>\r\n        <ModalWindow active={active} setActive={setActive}>\r\n            <h4>YOU CAN DO SOME CHANGES</h4>\r\n            <UniversalInputText type={'text'} onChange={handlerForUpdateQuestionCard}\r\n                                placeholder={'Here you can update question'}/>\r\n            <UniversalInputText type={'text'} onChange={handlerForUpdateAnswerCard}\r\n                                placeholder={'Here you can update answer'}/>\r\n            <UniversalButton onClick={updateModalHandler}>Update</UniversalButton>\r\n            <UniversalButton onClick={updateModalHandlerCancel}>Cancel</UniversalButton>\r\n        </ModalWindow>\r\n    </div>\r\n}\r\n\r\nexport default ModalForUpdateCard;","import React, {useState} from 'react';\r\nimport {CardType} from '../cards-reducer';\r\nimport ModalForDelete from '../../../03-Components/SuperComponents/Modal/ModalForCards/ModalForDelete';\r\nimport ModalForUpdateCard from '../../../03-Components/SuperComponents/Modal/ModalForCards/ModalForUpdateCard';\r\nimport Button from '../../../03-Components/SuperComponents/Button/Button';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport s from './CardElement.module.css'\r\nimport {RootStateType} from '../../../04-App/store';\r\nimport {authSelectors} from '../../01-Login/00-index';\r\n\r\ntype CardPropsType = {\r\n    card: CardType\r\n    updateCard: (card: CardType) => void\r\n    removeCard: (id: string) => void\r\n}\r\n\r\nconst CardElement: React.FC<CardPropsType> = (\r\n    {\r\n        card,\r\n        updateCard,\r\n        removeCard\r\n    }) => {\r\n\r\n    //for modal\r\n    const [activeModalDelete, setActiveModalDelete] = useState<boolean>(false)\r\n    const [activeModalUpdate, setActiveModalUpdate] = useState<boolean>(false)\r\n    const [questionCard, setQuestionCard] = useState<string>('')\r\n    const [answerCard, setAnswerCard] = useState<string>('')\r\n\r\n    //for disabled\r\n    const userId = useSelector<RootStateType, string>(authSelectors.selectorUserId)\r\n\r\n    //for delete\r\n    const deleteModalHandlerYes = () => {\r\n        removeCard(card._id)\r\n    }\r\n\r\n    //for update\r\n    const updateModalHandler = () => {\r\n        updateCard({\r\n            _id: card._id,\r\n            type: 'Java',\r\n            question: questionCard,\r\n            answer: answerCard,\r\n            cardsPack_id: card.cardsPack_id,\r\n            grade: 4.54654,\r\n            rating: 0\r\n        })\r\n        setActiveModalUpdate(false)\r\n    }\r\n\r\n    const onUpdateHandler = () => {\r\n        setActiveModalUpdate(true)\r\n    }\r\n\r\n    const onRemoveHandler = () => {\r\n        setActiveModalDelete(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.card}>\r\n            <h5>{card.question ? card.question : 'empty question'}</h5>\r\n            <p>{card.answer ? card.answer : 'empty answer'}</p>\r\n            <p>type of card: {card.type ? card.type : 'empty type'} </p>\r\n            <p>grade: </p>\r\n            <p>{card.grade}</p>\r\n            <Button onClick={onUpdateHandler} disabled={card.user_id !== userId}>Update</Button>\r\n            <Button onClick={onRemoveHandler} disabled={card.user_id !== userId}>Delete</Button>\r\n\r\n            <ModalForDelete active={activeModalDelete}\r\n                            setActive={setActiveModalDelete}\r\n                            deleteModalHandlerYes={deleteModalHandlerYes}/>\r\n\r\n            <ModalForUpdateCard active={activeModalUpdate}\r\n                                setActive={setActiveModalUpdate}\r\n                                setQuestionCard={setQuestionCard}\r\n                                setAnswerCard={setAnswerCard}\r\n                                updateModalHandler={updateModalHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardElement\r\n","import React, {ChangeEvent} from 'react';\r\nimport ModalWindow from '../Modal';\r\nimport UniversalInputText from '../../InputText/UniversalInputText';\r\nimport UniversalButton from '../../Button/FormButton/UniversalButton';\r\n\r\n\r\ntype ModalAddPropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void\r\n    addCardHandler: () => void,\r\n    setNewQuestionCard: (q: string) => void,\r\n    setNewAnswerCard: (q: string) => void,\r\n    setTypeNewCard: (t: string) => void\r\n}\r\n\r\nconst ModalForAddCards: React.FC<ModalAddPropsType> = ({\r\n                                                           active, setActive,\r\n                                                           addCardHandler, setNewQuestionCard, setNewAnswerCard, setTypeNewCard\r\n                                                       }) => {\r\n\r\n\r\n    const handlerForAddQuestionCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewQuestionCard(e.currentTarget.value)\r\n\r\n    }\r\n    const handlerForAddAnswerCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewAnswerCard(e.currentTarget.value)\r\n\r\n    }\r\n    const handlerForAddTypeCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTypeNewCard(e.currentTarget.value)\r\n\r\n    }\r\n    const addCardHandlerCancel = () => {\r\n        setActive(false)\r\n    }\r\n    return <div>\r\n        <ModalWindow active={active} setActive={setActive}>\r\n            <h4>ADD NEW CARD</h4>\r\n            <p>QUESTION</p><UniversalInputText type={'text'} onChange={handlerForAddQuestionCard} placeholder={'Write your question here'}/>\r\n            <p>ANSWER</p> <UniversalInputText type={'text'} onChange={handlerForAddAnswerCard} placeholder={'Be sure to specify the answer'}/>\r\n            <p>TYPE</p> <UniversalInputText type={'text'} onChange={handlerForAddTypeCard} placeholder={'Specify a type'}/>\r\n            <UniversalButton onClick={addCardHandler}>ADD</UniversalButton>\r\n            <UniversalButton onClick={addCardHandlerCancel}>Cancel</UniversalButton>\r\n        </ModalWindow>\r\n    </div>\r\n\r\n}\r\n\r\nexport default ModalForAddCards;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport s from './Cards.module.css'\r\nimport {addCard, CardType, deleteCard, getCards, updateCard} from './cards-reducer';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport CardElement from './CardElement/CardElement';\r\nimport ModalForAddCards from '../../03-Components/SuperComponents/Modal/ModalForCards/ModalForAddCard';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport UniversalButton from '../../03-Components/SuperComponents/Button/FormButton/UniversalButton';\r\nimport {authSelectors} from '../01-Login/00-index';\r\n\r\n\r\nconst Cards: React.FC = () => {\r\n\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const cards = useSelector<RootStateType, CardType[]>(state => state.cards.cards)\r\n\r\n    const dispatch = useDispatch()\r\n    //for modal\r\n    const [activeModalAdd, setActiveModalAdd] = useState<boolean>(false)\r\n    const [newQuestionCard, setNewQuestionCard] = useState<string>('')\r\n    const [newAnswerCard, setNewAnswerCard] = useState<string>('')\r\n    const [typeNewCard, setTypeNewCard] = useState<string>('undefined')\r\n\r\n    const isAuth = useSelector<RootStateType, boolean>(authSelectors.selectorIsAuth)\r\n\r\n    //request on start, data from redux\r\n    useEffect(() => {\r\n        dispatch(getCards(id))\r\n    }, [])\r\n\r\n    const onSearch = () => {\r\n        // dispatch(getCards({packName: inputValue, min: range[0], max: range[1]}))\r\n    }\r\n\r\n    function genID(serverNum: number) {\r\n        return (serverNum + '' + (new Date).getTime());\r\n    }\r\n\r\n    //fake obj for creating\r\n    const cardTestObj: CardType = {\r\n        _id: genID(2),\r\n        type: typeNewCard,\r\n        question: newQuestionCard,\r\n        answer: newAnswerCard,\r\n        cardsPack_id: id,\r\n        grade: 4.54654,\r\n        rating: 0\r\n    }\r\n\r\n    const onAddCard = () => {\r\n        setActiveModalAdd(true)\r\n    }\r\n\r\n    const changeCard = (card: CardType) => {\r\n        dispatch(updateCard(card))\r\n    }\r\n    const addCardHandler = () => {\r\n        dispatch(addCard(cardTestObj))\r\n        setActiveModalAdd(false)\r\n    }\r\n\r\n    const removeCard = (id: string) => {\r\n        dispatch(deleteCard(id))\r\n    }\r\n\r\n    if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n    const mappedCards = cards.map((card: CardType) => <CardElement key={card._id}\r\n                                                                   card={card}\r\n                                                                   updateCard={changeCard}\r\n                                                                   removeCard={removeCard}/>)\r\n    return <>\r\n        <div className={s.cardsPage}>\r\n            <div>\r\n                <h4> AVAILABLE CARDS </h4>\r\n            </div>\r\n            <div className={s.cardsBlock}>\r\n                {\r\n                    mappedCards\r\n                }\r\n            </div>\r\n            <div className={s.search}>\r\n                <UniversalButton onClick={onSearch}>Search</UniversalButton>\r\n                <UniversalButton onClick={onAddCard}>Add\r\n                    Card</UniversalButton>\r\n            </div>\r\n        </div>\r\n        <ModalForAddCards active={activeModalAdd} setActive={setActiveModalAdd} addCardHandler={addCardHandler}\r\n                          setNewQuestionCard={setNewQuestionCard} setNewAnswerCard={setNewAnswerCard}\r\n                          setTypeNewCard={setTypeNewCard}/>\r\n    </>\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\n\r\nimport s from './Error404.module.css'\r\n\r\nfunction ErrorPage() {\r\n    return (<div className={s.errorPage}>\r\n            <h1>404</h1>\r\n            <span className={s.firstP}>Page not found</span>\r\n            <span className={s.secondP}>Sorry, but the page you were looking for doesn’t exist.</span>\r\n            <span className={s.thirdP}>Go back to\r\n                  <span className={s.item}>\r\n                    <NavLink to={PATH.PROFILE} activeClassName={s.activeLink}>PROFILE</NavLink>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorPage;\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../04-App/store';\r\n\r\nimport s from './ErrorSnackBar.module.css'\r\nimport {setAppStatus} from '../../04-App/app-reducer';\r\n\r\ntype ErrorBarPropsType = {\r\n    errorMessage: string\r\n}\r\n\r\nconst ErrorSnackBar = (props: ErrorBarPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<RootStateType, string | null>(state => state.app.appState.error)\r\n\r\n    const onClickHandler = () => dispatch(setAppStatus({status: 'idle', error: null}))\r\n\r\n    return (\r\n        <div className={error ? `${s.notification}` : `: ${s.closeNotification}`}>\r\n            <div className={s.text}> {props.errorMessage} </div>\r\n            <div className={`${s.close}`}>\r\n                <div className={s.text} onClick={onClickHandler}>X</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorSnackBar;\r\n","import React from 'react';\r\nimport {CardType} from '../../06-Cards/cards-reducer';\r\nimport Button from '../../../03-Components/SuperComponents/Button/Button';\r\nimport UniversalButton from '../../../03-Components/SuperComponents/Button/FormButton/UniversalButton';\r\n\r\ntype LearnCardElementPropsType = {\r\n    card: CardType,\r\n    checked: boolean,\r\n    setIsChecked: (value: boolean) => void\r\n    onNextCard: (value: number) => void\r\n    grades: string[]\r\n}\r\n\r\nexport const LearnCardElement: React.FC<LearnCardElementPropsType> = (\r\n    {\r\n        card,\r\n        checked,\r\n        setIsChecked,\r\n        onNextCard,\r\n        grades\r\n    }\r\n) => {\r\n\r\n    const nextCard = (value: number) => {\r\n        onNextCard(value)\r\n    }\r\n\r\n    const mappedButton = grades.map((el, i) => (\r\n        <Button key={i}\r\n                onClick={(e) => nextCard(i + 1)}>{el}</Button>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <h5>QUESTION</h5>\r\n            <h4>{card.question}</h4>\r\n            <p>ID карты: {card._id}</p>\r\n            <div>\r\n                {\r\n                    !checked && <UniversalButton onClick={(e) => setIsChecked(true)}>CHECK</UniversalButton>\r\n                }\r\n            </div>\r\n            <div>\r\n                {\r\n                    checked && (\r\n                        <div>\r\n                            <hr/>\r\n                            <h4>Answer: {card.answer}</h4>\r\n                            <p>Type: {card.type}</p>\r\n                            <p>Grade: {card.grade}</p>\r\n                            <div>\r\n                                {\r\n                                    mappedButton\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\n\r\nimport s from './LearningPage.module.css'\r\nimport {CardType, getCards, sendGrade} from '../06-Cards/cards-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../../04-App/store';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport ErrorSnackBar from '../../03-Components/ErrorSnackBar/ErrorSnackBar';\r\nimport {LearnCardElement} from './LearnCardElement/LearnCardElement';\r\nimport {authSelectors} from '../01-Login/00-index';\r\nimport {appSelectors} from '../../04-App/00-index';\r\n\r\nconst grades = ['no idea', 'forgot', 'think long', 'mix up', 'knew'];\r\n\r\nconst getRandomCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\nexport const LearningPage: React.FC = React.memo(() => {\r\n    const cards = useSelector<RootStateType, CardType[]>(state => state.cards.cards)\r\n    const isAuth = useSelector<RootStateType, boolean>(authSelectors.selectorIsAuth)\r\n    const error = useSelector<RootStateType, string | null>(appSelectors.selectorError)\r\n\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const [firstCard, setFirstCard] = useState<boolean>(true)\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const [card, setCard] = useState<CardType>({\r\n        _id: ''\r\n    } as CardType)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (firstCard) {\r\n            dispatch(getCards(id))\r\n            setFirstCard(false)\r\n        }\r\n        if (cards.length > 0) {\r\n            setCard(getRandomCard(cards))\r\n            return () => {\r\n                console.log('Learning Page clear effect ')\r\n            }\r\n        } else {\r\n\r\n        }\r\n    }, [cards, dispatch])\r\n\r\n    const onNextCard = useCallback((grade: number) => {\r\n        setIsChecked(false);\r\n        if (cards.length > 0) {\r\n            if(!card._id) {\r\n                console.log('error in useCallback')\r\n            }\r\n            dispatch(sendGrade(grade, card._id))\r\n            setCard(getRandomCard(cards))\r\n        } else {\r\n            alert(`Something bad 'onNextCard'`)\r\n        }\r\n    }, [cards, card])\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.pageContainer}>\r\n            {cards.length > 0 && <LearnCardElement card={card}\r\n                                                   grades={grades}\r\n                                                   checked={isChecked}\r\n                                                   setIsChecked={setIsChecked}\r\n                                                   onNextCard={onNextCard}/>\r\n            }\r\n            {error && <ErrorSnackBar errorMessage={error}/>}\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Profile from '../../02-Features/04-Profile/Profile';\r\nimport Login from '../../02-Features/01-Login/Login';\r\nimport Registration from '../../02-Features/02-Registration/Registration';\r\nimport {ResetPassword} from '../../02-Features/03-PasswordRecovery/ResetPassword';\r\nimport {PasswordRecovery} from '../../02-Features/03-PasswordRecovery/PasswordRecovery';\r\nimport CardPacks from '../../02-Features/05-CardPacks/CardPacks';\r\nimport Cards from '../../02-Features/06-Cards/Cards';\r\nimport ErrorPage from '../../03-Components/NotFound/Error404';\r\n\r\nimport s from './Routes.module.css'\r\nimport {LearningPage} from '../../02-Features/07-Learning/LearningPage';\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REG: '/registration',\r\n    PASSWORD_POST: '/newPassword/:token?',\r\n    PASS_REC: '/passwordRecovery',\r\n    PROFILE: '/profile',\r\n    CARD_PACKS: '/card_packs',\r\n    CARDS: '/cards',\r\n    LEARNING: '/learning',\r\n    ALL_COMPONENTS: '/allComponents',\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div className={s.routes}>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Profile/>}/>\r\n                <Route path={PATH.LOGIN} exact render={() => <Login/>}/>\r\n                <Route path={PATH.REG} exact render={() => <Registration/>}/>\r\n                <Route path={PATH.PASSWORD_POST} exact render={() => <ResetPassword/>}/>\r\n                <Route path={PATH.PASS_REC} exact render={() => <PasswordRecovery/>}/>\r\n                <Route path={PATH.PROFILE} exact render={() => <Profile/>}/>\r\n                <Route path={PATH.CARD_PACKS} exact render={() => <CardPacks/>}/>\r\n                <Route path={PATH.CARDS + '/:id'} exact render={() => <Cards/>}/>\r\n                <Route path={PATH.LEARNING + '/:id'} exact render={() => <LearningPage/>}/>\r\n                <Route path={'/404'} render={() => <ErrorPage/>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import React, {useCallback, useEffect, useRef} from 'react'\r\nimport s from './menu.module.scss'\r\nimport {Link} from \"react-scroll\";\r\n\r\nfunction Menu({header, items, active, setActive}) {\r\n\r\n    const modalRef = useRef(null)\r\n\r\n    const onClickOutsideHandler = useCallback(\r\n        (event) => {\r\n            if (\r\n                active &&\r\n                !(\r\n                    modalRef.current && modalRef.current.contains(event.target)\r\n                )\r\n            ) {\r\n                setActive(false);\r\n            }\r\n        },\r\n        [active, modalRef]\r\n    );\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', onClickOutsideHandler);\r\n        return () => {\r\n            window.removeEventListener('click', onClickOutsideHandler);\r\n        };\r\n    }, [onClickOutsideHandler]);\r\n\r\n    return (<div className={`${active ? s.menuActive : s.menu}`}>\r\n            <div className={s.menuContent}>\r\n                <div className={s.closeMenu} onClick={() => {\r\n                    setActive(false)\r\n                }}>\r\n                  x\r\n                </div>\r\n                <div className={s.menuHeader}>\r\n                    {header}\r\n                </div>\r\n                <div className={s.items}>\r\n                    {items.map(item =>\r\n                        <div className={s.oneItem}>\r\n                            <Link\r\n                                className={s.link}\r\n                                activeClass={s.active}\r\n                                to={item}\r\n                                spy={true}\r\n                                smooth={true}\r\n                                offset={-99}\r\n                                duration={500}\r\n                            >{item}</Link>\r\n                        </div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","import React, {useState} from 'react'\r\nimport Menu from \"./menu/menu\";\r\nimport s from './Burger.module.scss'\r\n\r\n\r\n\r\nfunction BurgerMenu({items}) {\r\n    const [menuActive, setMenuActive] = useState(false)\r\n    return (\r\n        <div className={s.header}>\r\n            <div className={s.burgerBtn} onClick={() => setMenuActive(!menuActive)}>\r\n               X\r\n            </div>\r\n            <Menu items={items} header={'menu'} active={menuActive} setActive={setMenuActive}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BurgerMenu;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Logout from '../01-Login/Logout';\r\nimport {PATH} from '../../04-App/Routes/Routes';\r\nimport s from './Header.module.css'\r\nimport BurgerMenu from '../../03-Components/BurgerMenu/BurgerMenu';\r\n\r\nfunction Header() {\r\n    let items = ['PROFILE', 'CARDS PACK', 'SIGN IN', 'SIGN UP', 'RECOVERY PASSWORD']\r\n    return (\r\n        <div className={s.header}>\r\n            <div className={s.logo}>\r\n                Study Point\r\n                <span>.</span>\r\n            </div>\r\n            <div className={s.nav}>\r\n               <span className={s.item}>\r\n                    <NavLink to={PATH.PROFILE} activeClassName={s.activeLink}>PROFILE</NavLink>\r\n                </span>\r\n                <span className={s.item}>\r\n                    <NavLink to={PATH.CARD_PACKS} activeClassName={s.activeLink}> CARDS PACK </NavLink>\r\n                </span>\r\n                <span className={s.item}>\r\n                    <NavLink to={PATH.LOGIN} activeClassName={s.activeLink}> SIGN IN </NavLink>\r\n                </span>\r\n                <span className={s.item}>\r\n                    <NavLink to={PATH.REG} activeClassName={s.activeLink}> SIGN UP </NavLink>\r\n                </span>\r\n                <span className={s.item}>\r\n                    <NavLink to={PATH.PASS_REC} activeClassName={s.activeLink}> RECOVERY PASSWORD </NavLink>\r\n                </span>\r\n                <span className={s.item}><Logout/></span>\r\n            </div>\r\n            <BurgerMenu items={items}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n{/*<span className={s.item}>*/\r\n}\r\n{/*    <NavLink to={path.PASSWORD_POST} activeClassName={s.activeLink}> CHANGE PASSWORD </NavLink>*/\r\n}\r\n// {/*</span>*/}todo:it's should be privat link(check token in url!)\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType} from './store';\r\nimport ProgressBar from '../03-Components/SuperComponents/ProgressBar/ProgressBar';\r\nimport {getAuthUserData} from '../02-Features/01-Login/auth-reducer';\r\nimport Header from '../02-Features/00-Header/Header';\r\nimport Routes from './Routes/Routes';\r\nimport ErrorSnackBar from '../03-Components/ErrorSnackBar/ErrorSnackBar';\r\n\r\nimport './App.css';\r\nimport {appSelectors} from './00-index';\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const appStatus = useSelector<RootStateType, string>(appSelectors.selectorAppStatus)\r\n    // const finalStyle = appStatus === 'loading' ? `${s.fullOverlay} ${s.activeFullOverlay}` : s.fullOverlay\r\n\r\n    const error = useSelector<RootStateType, string | null>(appSelectors.selectorError)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getAuthUserData())\r\n    }, []);\r\n\r\n    return <div className='App'>\r\n        <Header/>\r\n        {appStatus === 'loading' ? <ProgressBar/> : null}\r\n        <Routes/>\r\n        {error && <ErrorSnackBar errorMessage={error}/>}\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {authReducer} from '../02-Features/01-Login/auth-reducer';\r\nimport {registrationReducer} from '../02-Features/02-Registration/registration-reducer';\r\nimport {appReducer} from './app-reducer';\r\nimport {cardsReducer} from '../02-Features/06-Cards/cards-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {cardPacksReducer} from '../02-Features/05-CardPacks/cardPacks-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    registration: registrationReducer,\r\n    app: appReducer,\r\n    cardPacks: cardPacksReducer,\r\n    cards: cardsReducer,\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './04-App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {store} from \"./04-App/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        {/*HashRouter используем для статических серверов типо GH-pages. BrowserRouter для сервера который отвечает на запросы*/}\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__1uCgq\",\"menuActive\":\"menu_menuActive__3XKVN\",\"menuContent\":\"menu_menuContent__FMhUM\",\"closeMenu\":\"menu_closeMenu__1T_kJ\",\"menuHeader\":\"menu_menuHeader__3NPmy\",\"items\":\"menu_items__21MIB\",\"oneItem\":\"menu_oneItem__1mnpW\",\"link\":\"menu_link__vL6It\",\"active\":\"menu_active__1JL9a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image_upload\":\"FileInput_image_upload__2u0zG\",\"input_label\":\"FileInput_input_label__1ZjEG\",\"photoLoad\":\"FileInput_photoLoad__JUp_k\",\"btn_image_upload\":\"FileInput_btn_image_upload__1c2bw\",\"btn_label\":\"FileInput_btn_label__2A9P5\",\"sentBtn\":\"FileInput_sentBtn__3uetA\",\"file_size\":\"FileInput_file_size__3BAaS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1hcp-\",\"modalActive\":\"Modal_modalActive__1EDsx\",\"modalContent\":\"Modal_modalContent__3GRfy\",\"btn\":\"Modal_btn__1XRha\",\"modalContentActive\":\"Modal_modalContentActive__aUhK0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorPage\":\"Error404_errorPage__3bjbR\",\"firstP\":\"Error404_firstP__3sDTP\",\"thirdP\":\"Error404_thirdP__1NFTQ\",\"secondP\":\"Error404_secondP__4gTTJ\",\"item\":\"Error404_item__3FAel\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"ErrorSnackBar_notification__1JEvM\",\"closeNotification\":\"ErrorSnackBar_closeNotification__1X1MR\",\"text\":\"ErrorSnackBar_text__1VaxA\",\"close\":\"ErrorSnackBar_close__3o_S-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inactive\":\"Login_inactive__1IbQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inactive\":\"CardPacksElement_inactive__1ruXk\",\"active\":\"CardPacksElement_active__g3aup\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"UniversalnputText_superInput__3AmVY\",\"errorInput\":\"UniversalnputText_errorInput__5GZqf\",\"error\":\"UniversalnputText_error__1Vt53\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SendingForm_title__3K5bA\",\"inactive\":\"SendingForm_inactive__17yug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"CardPacks_search__YWGVW\",\"paginator\":\"CardPacks_paginator__1G6Nx\",\"cards\":\"CardPacks_cards__3JFKm\",\"table\":\"CardPacks_table__1fJSh\",\"card\":\"CardPacks_card__34PvL\",\"heading\":\"CardPacks_heading__mNIc1\",\"content\":\"CardPacks_content__1E6Ys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPageNumber\":\"Paginator_usersPageNumber__1bJd-\",\"totalCount\":\"Paginator_totalCount__3ZS_e\",\"pageNumber\":\"Paginator_pageNumber__nmDQ4\",\"selected\":\"Paginator_selected__1lABd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsPage\":\"Cards_cardsPage__1nkIM\",\"search\":\"Cards_search__2m0Hb\",\"cardsBlock\":\"Cards_cardsBlock__3dZou\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"ProgressBar_progress__3er83\",\"progressBar\":\"ProgressBar_progressBar__c2GoH\",\"progress-animation\":\"ProgressBar_progress-animation__N8A4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"UniversalButton_default__hiV6D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"UniversalCheckbox_checkbox__3UAHC\",\"spanClassName\":\"UniversalCheckbox_spanClassName__1G2Qz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Burger_header__Hvvoa\",\"burgerBtn\":\"Burger_burgerBtn__Wguq4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoutForm\":\"Logout_logoutForm__13arU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__rzn-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataForm\":\"dataForm_dataForm__9frt7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardElement_card__1KSrf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routes\":\"Routes_routes__BlHpK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"LearningPage_pageContainer__16EJo\"};"],"sourceRoot":""}